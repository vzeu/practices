import os
import numpy as np
import pandas as pd

# Treating the data as a time series, we can generate random circular shifts of the data. 
file_path = r"#your file path"
time_column = 'Shell radius'
data_column = '# Intersections'

def read_data_from_excel(file_path, time_column, data_column):
    if not os.path.isfile(file_path):
        raise ValueError(f"Invalid file path: {file_path}")
    
    df = pd.read_excel(file_path)
    df.set_index(time_column, inplace=True)
    df = df[[data_column]]
    df.rename(columns={data_column: 'data'}, inplace=True)
    return df

# Create a pseudo-distribution of the data, generate random circular shifts and record the generated data at each shift to make it more RAM efficient.
def random_circular_shift_generator(data, n_shifts=1000):
    for shift_id in range(n_shifts):
        shift_point = np.random.randint(0, len(data))
        shifted_data = pd.concat([data.iloc[shift_point:], data.iloc[:shift_point]])
        yield shift_id, shifted_data

# Record the generated data first and then calculate the CI accordingly to ensure it is the same data sets used for the CI calculation and plotting. 
# Calculate the confidence intervals incrementally by keeping track of the running percentiles, thus avoiding storing all the shifted data in memory.
def calculate_confidence_intervals(shifted_series_generator, n_shifts, confidence_level=0.95):
    lower_percentile = (1 - confidence_level) / 2 * 100
    upper_percentile = (1 + confidence_level) / 2 * 100
    
    lower_confidence_interval = None
    upper_confidence_interval = None
    
    # Iterate over the generator
    for shift_id, shifted_data in shifted_series_generator:
        data_values = shifted_data['data'].values
        
        if lower_confidence_interval is None:
            lower_confidence_interval = np.percentile(data_values, lower_percentile)
            upper_confidence_interval = np.percentile(data_values, upper_percentile)
        else:
            lower_confidence_interval = np.minimum(lower_confidence_interval, np.percentile(data_values, lower_percentile))
            upper_confidence_interval = np.maximum(upper_confidence_interval, np.percentile(data_values, upper_percentile))
    
    return lower_confidence_interval, upper_confidence_interval

def save_temp_file_to_final_csv(temp_file_path, output_path):
    final_csv_path = os.path.join(output_path, 'generated_data.csv')
    os.rename(temp_file_path, final_csv_path)



data = read_data_from_excel(file_path, time_column, data_column)

temp_file_path = 'temp_shifted_data.csv'
with open(temp_file_path, 'w') as f:
    f.write('shift_id,Shell radius,data\n')
    for shift_id, shifted_data in random_circular_shift_generator(data, n_shifts=1000):
        for index, row in shifted_data.iterrows():
            f.write(f"{shift_id},{index},{row['data']}\n")

shifted_series_generator = random_circular_shift_generator(data, n_shifts=1000)
lower_ci, upper_ci = calculate_confidence_intervals(shifted_series_generator, n_shifts=1000)

confidence_intervals = pd.DataFrame({
    'lower': lower_ci,
    'upper': upper_ci
}, index=data.index)

original_data = data['data'].values
exceeds_upper_ci = original_data > upper_ci
exceeding_ranges = data.index[exceeds_upper_ci]

df_exceeding_ranges = pd.DataFrame({'Shell radius': exceeding_ranges, '# Intersections': original_data[exceeds_upper_ci]})
df_exceeding_ranges.to_excel('exceeding_ranges.xlsx', index=False)

# Save the temporary file to the final CSV file
output_path = r"#your output path"
save_temp_file_to_final_csv(temp_file_path, output_path)

confidence_intervals
